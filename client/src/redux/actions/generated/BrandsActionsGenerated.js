/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN BrandsActionsGenerated.js PLEASE EDIT ../BrandsActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import BrandsApi from "../../../api/BrandsApi";

let actionsFunction = {

  //CRUD METHODS

  // Create brands
  createBrands: function(brands) {
    return function(dispatch) {
      return BrandsApi
        .createBrands(brands)
        .then(brands => {
          dispatch(actionsFunction.createBrandsSuccess(brands));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createBrandsSuccess: function(brands) {
    return { type: types.CREATE_BRANDS_SUCCESS, payload: brands };
  },


  // Delete brands
  deleteBrands: function(id) {
    return function(dispatch) {
      return BrandsApi
        .deleteBrands(id)
        .then(brands => {
          dispatch(actionsFunction.deleteBrandsSuccess(brands));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteBrandsSuccess: function(brands) {
    return { type: types.DELETE_BRANDS_SUCCESS, payload: brands };
  },


  // Get brands
  loadBrands: function(id) {
    return function(dispatch) {
      return BrandsApi
        .getOneBrands(id)
        .then(brands => {
          dispatch(actionsFunction.loadBrandsSuccess(brands));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadBrandsSuccess: function(brands) {
    return { type: types.GET_BRANDS_SUCCESS, payload: brands };
  },

  // Load  list
  loadBrandsList: function() {
    return function(dispatch) {
      return BrandsApi
        .getBrandsList()
        .then(list => {
          dispatch(actionsFunction.loadBrandsListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadBrandsListSuccess: function(list) {
    return { type: types.LIST_BRANDS_SUCCESS, payload: list };
  },

	
  // Save brands
  saveBrands: function(brands) {
    return function(dispatch) {
      return BrandsApi
        .saveBrands(brands)
        .then(brands => {
          dispatch(actionsFunction.saveBrandsSuccess(brands));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveBrandsSuccess: function(brands) {
    return { type: types.UPDATE_BRANDS_SUCCESS, payload: brands };
  },


};

export default actionsFunction;
